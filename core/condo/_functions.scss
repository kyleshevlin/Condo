///
/// Return the gutter width for the current settings
/// @access private
/// @param {Integer} $gutters Number of gutters in grid, equivalent to number of columns generally
/// @param {Float} $gutter-ratio Floating number representing the width of a gutter compared to the width of a column
/// @return {Percentage} Width equivalent with gutters requested
///
@function gutter-width($gutters, $gutter-ratio) {
  @if $gutters == 0 {
    @return 0;
  } @else {
    @return 100 / $gutters * $gutter-ratio * 1%;
  }
}

///
/// Use when a width equivalent to a gutter or multiple gutters is needed
/// @access public
/// @param {Integer} $gutters [1] Number of gutter widths to return
/// @return {Percentage} Width equivalent to number of gutters requested
///
@function gutters($gutters: 1) {
  $layout: layout();
  $columns: map-get($layout, columns);
  $gutter-ratio: map-get($layout, gutters);
  $gutter-width: gutter-width($columns, $gutter-ratio);

  @return $gutter-width * $gutters;
}

///
/// Sets up the current layout, ensuring all $condo keys are mapped and have values
/// @access public
/// @param {Map} $map [$condo] Map to be merged into $condo-defaults
/// @return {Map} Result of merging the supplied $map with $condo-defaults
///
@function layout($map: $condo) {
  @return map-merge($condo-defaults, $map);
}

///
/// Return a column width measured as if there were no gutters
/// @access private
/// @param {Integer} $columns Number of columns in grid
/// @param {Percentage} $gutter-width Width of one gutter
/// @return {Percentage} Width equivalent with columns requested
///
@function raw-column-width($columns, $gutter-width) {
  $layout: layout();
  $gutter-position: map-get($layout, gutter-position);

  @if $gutter-position == 'split' {
    @return 100% / $columns;
  } @else {
    @return (100% + $gutter-width) / $columns;
  }
}

///
/// Return the width and margins given the current settings
/// @access private
/// @param {Integer} $spans Number of column widths to return
/// @return {Map} Map with width and margin values
///
@function span-math($spans) {
  $layout: layout();
  $columns: map-get($layout, columns);
  $gutters: $columns;
  $gutter-position: map-get($layout, gutter-position);
  $gutter-ratio: map-get($layout, gutters);
  $gutter-width: gutter-width($gutters, $gutter-ratio);
  $raw-column-width: raw-column-width($columns, $gutter-width);
  $column-width: $raw-column-width - $gutter-width;
  $width: null;
  $margin-before: null;
  $margin-after: null;

  $width: ($raw-column-width * ($spans - 1)) + $column-width;
  $margin-after: $gutter-width;

  @if $gutter-position == 'split' {
    $margin-before: $gutter-width / 2;
    $margin-after: $margin-before;
  }

  @return (
    width: $width,
    margin-before: $margin-before,
    margin-after: $margin-after
  );
}

///
/// Use when a width equivalent to the spans and keywords provided is needed
/// @access public
/// @param {Integer} $spans [1] Number of column widths to return
/// @param {String} $keyword [null] Options: wide, wider; Increases width by 1 or 2 gutter-widths respectively
/// @return {Percentage} Width equivalent to number of columns requested
///
@function span($spans: 1, $keyword: null) {
  $layout: layout();
  $columns: map-get($layout, columns);
  $gutters: $columns;
  $gutter-position: map-get($layout, gutter-position);
  $gutter-ratio: map-get($layout, gutters);
  $gutter-width: gutter-width($gutters, $gutter-ratio);
  $raw-column-width: raw-column-width($columns, $gutter-width);
  $column-width: $raw-column-width - $gutter-width;
  $width: ($raw-column-width * ($spans - 1)) + $column-width;

  @if $keyword == wide {
    $width: $width + $gutter-width;
  } @else if $keyword == wider {
    $width: $width + ($gutter-width * 2);
  }

  @return $width;
}
